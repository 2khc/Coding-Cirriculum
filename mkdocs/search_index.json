{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to C-alculator\n\n\nWhat is this all about?\n\n\nBut first let\u2019s start from the very start. What exactly is programming? Is it the act of scheduling a television or radio program? Well yeah it is but not in the context we\u2019re using it. Programming in general would be to provide specific instructions to a computer to do a certain task. These instructions usually take the form of an algorithm, a procedure to solve a problem or to carry out a specific task, in one of the many programming languages which are designed to communicate instructions to a machine. These may include writing an algorithm to make a robot move around in a circle, just like telling a dog to roll over.\n\n\nWhy?\n\n\nNow, why would we learn C programming? Firstly, C has been there for a long time! The first C programming language was written in the early 1970s by Dennis Ritchie. C is a very low level language which means the source code we have written in C is very close to machine code which is the language the CPU understands.  It is a compiled language which is faster than higher level language while learning. As its name suggests, compared to low level languages it is further from machine code and closer to English language. Furthermore, C programming language has been the basis for a lot of other higher level programming languages like Java, PHP, JavaScript, Python, C++, Objective C and a lot more. Learning the basics of C and its syntax will also help beginners learn other C based languages much more efficiently. \n\n\nWell enough of this boring introduction, let\u2019s start learning and have some fun!", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-c-alculator", 
            "text": "", 
            "title": "Welcome to C-alculator"
        }, 
        {
            "location": "/#what-is-this-all-about", 
            "text": "But first let\u2019s start from the very start. What exactly is programming? Is it the act of scheduling a television or radio program? Well yeah it is but not in the context we\u2019re using it. Programming in general would be to provide specific instructions to a computer to do a certain task. These instructions usually take the form of an algorithm, a procedure to solve a problem or to carry out a specific task, in one of the many programming languages which are designed to communicate instructions to a machine. These may include writing an algorithm to make a robot move around in a circle, just like telling a dog to roll over.", 
            "title": "What is this all about?"
        }, 
        {
            "location": "/#why", 
            "text": "Now, why would we learn C programming? Firstly, C has been there for a long time! The first C programming language was written in the early 1970s by Dennis Ritchie. C is a very low level language which means the source code we have written in C is very close to machine code which is the language the CPU understands.  It is a compiled language which is faster than higher level language while learning. As its name suggests, compared to low level languages it is further from machine code and closer to English language. Furthermore, C programming language has been the basis for a lot of other higher level programming languages like Java, PHP, JavaScript, Python, C++, Objective C and a lot more. Learning the basics of C and its syntax will also help beginners learn other C based languages much more efficiently.   Well enough of this boring introduction, let\u2019s start learning and have some fun!", 
            "title": "Why?"
        }, 
        {
            "location": "/chapter1/", 
            "text": "Lesson 1: Getting started\n\n\nThis first lesson will make sure that both you and your computer are prepared correctly to handle all the programming tasks you'll be completing as you progress through this course!\n\n\nLet's get started. You'll be needing a text editor. If you're looking for something with a nice and beautiful theme, we recommend \nSublime Text 3\n, if you want something\na little more plain you can simply go for \nNotepad++\n.\n\n\nThe next step is to install a C \ncompiler\n onto your computer. \"What is a compiler?\", you ask... Well, as mentioned earlier, C is a low-level programming language meaning that the commands in C are closely related to the instructions that your \ncomputer processing unit\n would run. \nHOWEVER\n, this still means that the language is undirectly unreadable by the CPU, as such, you need to first compile your code\nsuch that it is translated into a form that your CPU can run.\n\n\nDownload the compiler \nhere\n, you can see the button for \"Download Installer\" at the top right corner of the page.\n\n\nOpen your note editor and create a new file, save it with the C file extension, for example: \"lesson1.c\". We've decided to adhere to traditions so your first program will be a \"Hello, world!\" program, first this first lesson, just type out everything we tell you to, as the ultimate aim of this section is to teach you how to compile and run your code.\n\n\n #include \nstdio.h\n\n\n int main(void)\n {\n     printf(\"Hello, world\");\n }\n\n\n\nThat's it! A fully working program, but how do we run it? We can't simply just double-click on the file and hope it would do something useful... In other worlds, we must first compile it.\n\n\n\n\nFirst, open your command-line or terminal. To do this on Windows, press Windows + R, then type cmd into the box and hit 'OK'. Meet the command-line interface, this scary black window, you'll become good friends with it on your programming journeys.\n\n\nNavigate to the directory on your computer in which you saved the file.\n\n\nFor example, if I am currently in \"C:/users/Documents\" and I want to go into \"C:/users/Documents/code\", I would type \"cd code\" to move into the \"code\" folder.\n\n\nIf you wish to move up a folder, on Windows you can type \"cd..\", on an Mac or Linux type \"cd ..\" (make sure to include that space).\n\n\nNext, we shall compile the code.\n\n\nType \"gcc\" followed by the name of your file, then followed by the name you wish the compiled code to be.\n\n\nFor example \"gcc lesson1.c output\".\n\n\nThe compile file is now called output, and to run it you can type \"output\" and see the results of your program.\n\n\n\n\nIf you found this all simple enough, the real programming begins next lesson, as well as an introduction to what everything means, that program we just wrote together will all make sense very soon!\n\n\nExtra Task\n\n\nNow that you know how to compile your code, spend a few minutes exploring your computer through the command-line, move around! Pick a distant folder and try to move into it from where you currently are! Try opening other files through the command-line\u2026 next time you want to listen to a music file, navigate there by command-line!", 
            "title": "Chapter 1"
        }, 
        {
            "location": "/chapter1/#lesson-1-getting-started", 
            "text": "This first lesson will make sure that both you and your computer are prepared correctly to handle all the programming tasks you'll be completing as you progress through this course!  Let's get started. You'll be needing a text editor. If you're looking for something with a nice and beautiful theme, we recommend  Sublime Text 3 , if you want something\na little more plain you can simply go for  Notepad++ .  The next step is to install a C  compiler  onto your computer. \"What is a compiler?\", you ask... Well, as mentioned earlier, C is a low-level programming language meaning that the commands in C are closely related to the instructions that your  computer processing unit  would run.  HOWEVER , this still means that the language is undirectly unreadable by the CPU, as such, you need to first compile your code\nsuch that it is translated into a form that your CPU can run.  Download the compiler  here , you can see the button for \"Download Installer\" at the top right corner of the page.  Open your note editor and create a new file, save it with the C file extension, for example: \"lesson1.c\". We've decided to adhere to traditions so your first program will be a \"Hello, world!\" program, first this first lesson, just type out everything we tell you to, as the ultimate aim of this section is to teach you how to compile and run your code.   #include  stdio.h \n\n int main(void)\n {\n     printf(\"Hello, world\");\n }  That's it! A fully working program, but how do we run it? We can't simply just double-click on the file and hope it would do something useful... In other worlds, we must first compile it.   First, open your command-line or terminal. To do this on Windows, press Windows + R, then type cmd into the box and hit 'OK'. Meet the command-line interface, this scary black window, you'll become good friends with it on your programming journeys.  Navigate to the directory on your computer in which you saved the file.  For example, if I am currently in \"C:/users/Documents\" and I want to go into \"C:/users/Documents/code\", I would type \"cd code\" to move into the \"code\" folder.  If you wish to move up a folder, on Windows you can type \"cd..\", on an Mac or Linux type \"cd ..\" (make sure to include that space).  Next, we shall compile the code.  Type \"gcc\" followed by the name of your file, then followed by the name you wish the compiled code to be.  For example \"gcc lesson1.c output\".  The compile file is now called output, and to run it you can type \"output\" and see the results of your program.   If you found this all simple enough, the real programming begins next lesson, as well as an introduction to what everything means, that program we just wrote together will all make sense very soon!", 
            "title": "Lesson 1: Getting started"
        }, 
        {
            "location": "/chapter1/#extra-task", 
            "text": "Now that you know how to compile your code, spend a few minutes exploring your computer through the command-line, move around! Pick a distant folder and try to move into it from where you currently are! Try opening other files through the command-line\u2026 next time you want to listen to a music file, navigate there by command-line!", 
            "title": "Extra Task"
        }, 
        {
            "location": "/chapter2/", 
            "text": "Chapter 2: Programming Basics\n\n\nBefore we can get into any coding stuff, we first need to understand some basic rules of programming first. Programming is pretty much all about taking in inputs and giving you out desired outputs. To make things a little bit more organised and understandable, these inputs and outputs are categorised into different groups called data types and are usually stored in variables.\n\n\nWhat is that program written in the 1st chapter?\n\n\nHere is the short program that you wrote and ran in the last chapter:\n\n\n #include \nstdio.h\n\n\n int main(void)\n {\n     printf(\"Hello, world\");\n }\n\n\n\nThe first line of that program is '#include \n', what this does is imports code into your program so that you can use things that have already been written by\nother programmers for you to use. We programmers don't like to reinvent the wheel. The library being imported is 'stdio', which stands for standard input output. It allows\nuse to use the printf function. The thing we put in-between the parentheses is called an argument to the function. It is the information which we input into the function\nfor it to create some output. The output in this case is 'Hello, world'.\n\n\nThe next thing to consider is the 'int main(void)'. What is this?  We can see that int main(void) is followed by a curly bracket '{'. These curly brackets always come in pairs.\nYou can see that the one that completes the pair is the '}' at the very end of the program. Everything between these 2 curly brackets belong in the 'main' function.\n\n\nAnother important thing to remember is that the main function is the beginning of every C program.\n\n\n int main(void)\n {\n\n }\n\n\n\nThis has to exist in every C program and it is where everything begins.\n\n\nData Types\n\n\nThe C programming language provides five basic types: int, float, double, char and boolean\n\n\nThe Integer Type int\n\n\nA variable declared to be of type int can only contain integer values or values that do not have decimal places (and are therefore whole numbers). To display an int value at the terminal, the printf conversion characters %iV are used.\n\n\nHow would one declare a variable of type int?\n\n\n int myVariable;\n\n\n\nIt's as simple as that! If you want, you can also add a value to it as you're intialising it like so:\n\n\n int myVariable = 5;\n\n\n\nExamples: -23, -83, 0, 435 and 1\n\n\nThe Floating Number Type float\n\n\nA variable declared to be of type float can be used for storing values containing decimal places. To display an int value at the terminal, the printf conversion characters %f are used. To express a value of type float, f or F is put after a value such as 14.5f or -122.23F.\n\n\nExamples: 3.0, 23.42, -0.3329 and 9.023\n\n\nSimilar to the integer declaration, a float declaration would be as follows:\n\n\n float myVariable;\n\n\n\nThe Type double\n\n\nThe double type is very similar to the float type except that it is more precise. It can store approximately as many significant digits as can a variable declared to be of type float. All floating-point values are taken as the double type unless told otherwise.\n\n\n double myVariable;\n\n\n\nThe char type\n\n\nThe char type is used to store a single character. Characters can be declared by enclosing a pair of quotation marks around them as follows; \u2018a\u2019, \u2018D\u2019, \u20183\u2019 and \u2019T\u2019. To display a char value at the terminal, the printf conversion characters %c are used\n\n\n char myVariable;\n\n\n\nThe Boolean Data Type boolean\n\n\nA variable declared to be of type boolean can only store 1 and 0 or True or False. boolean is used to indicate a Boolean condition or a condition which can be outputted to either true or false.\n\n\nUsing the Basic Data Types\u2026\u2026..(put down the code written by Kelvin)\n\n\nVariables\n\n\nVariables are named and used to store program computations or results. Variables can be named in a way that reflect the usage of the data stored. For example, I can create a variable called \u201cnumberOfpens\u201d to store an int type which represents the number of pens I possess.\n\n\nnumberOfpens = 4;\n\n\nNaming Conventions\n\n\nThere are certain rules that we need to follow when it comes down to naming variables.\n\n\nVariable names can\u2019t begin with a number.\nEmbedded spaces are not permitted.\nVariable names can\u2019t be those that are same to reserved words in C e.g. int, float and so on.\n$ is not a valid character.\n\n\nAlthough we cannot include any spaces in our variable names, programmers tend to use underscores( _ ) or uppercase letters to represent next words.\n\n\n calculate_angle\n isTrue\n\n\n\nArithmetic Expressions\n\n\nC\u2019s arithmetic expressions work pretty much the same way as those we use in the real-world. However, some of the maths rules might not be as you expect depending on the type that a variable is declared to be.\n\n\nWhen there are two or more operations the idea of priority or precedence is introduced to determine which operation is to be evaluated first.\n\n\nThe following notions are listed in an order of precedence.\n\n\nmultiplication sign -\n ( * )\ndivision sign -\n ( / )\nplus sign -\n ( + )\nminus sign -\n ( - )\n\n\nA Few Extra Operations to consider\n\n\nWhen you have an 'integer' variable, you can increment its value as follows:\n\n\n int number = 1;\n number = number + 1;\n\n\n\nThis would cause the value of number to increment by 1, as say the new value of number is the current value plus 1. This is often represented in short-form\nlike so:\n\n\n number++;\n\n\n\nThis is basically identical to 'number = number + 1;'. How about if you wish to increment by more than 1?\n\n\n number += 2;\n\n\n\nUsing '+=', we can cause an increment of +2, or whatever value we choose.\n\n\nFinally, all all these work with decrementing values if we replace the '+' with a '-', pretty neat?\n\n\n number--;\n number -= 2;\n\n\n\nProgrammers like to be lazy, this is just one of the many ways they chose to be so.\n\n\nExercises: Let's Write a Basic Calculator!\n\n\nThe first thing we need to do is prepare to prepare the file for use. We are going to be displaying things on the terminal, and asking for input, so we'll need to\ninclude the 'stdio' library.\n\n\n #include \nstdio.h\n\n\n int main(void)\n {\n\n }\n\n\n\nWe now need to ask for user input, and store the input into some variables, so that we can add them together later.\n\n\n#include \nstdio.h\n\n\nint main(void)\n{\n  int numberOne;\n  int numberTwo;\n\n  printf(\"Enter 2 numbers to add together:\\n\");\n  scanf(\"%d\", \nnumberOne);\n  scanf(\"%d\". \nnumberTwo);\n\n  printf(\"%d + %d = %d\", numberOne, numberTwo, numberOne + numberTwo);\n}\n\n\n\nSome new things have creeped up in this exercise. What does this 'scanf' do? Well, it takes input from the console then puts it into the variable stated in the second\nargument of the function.\n\n\n  scanf(\"%d\", \nnumberOne);\n\n\n\nThis takes your input value and assigns it to numberOne, such that numberOne holds whatever whole number you decide to input.\n\n\nBut wait a second, what is this \"%d\" that is in both the 'printf' and 'scanf' in the first arguments? This \"%d\" is a formatter that is applied to the value of the argument\nin the same function. For example, in the above example of scanf, the number input into the terminal is then assigned to the variable 'numberOne'.\n\n\nIn the printf, 'numberOne' is placed into the first %d, 'numberTwo' is placed into the second %d, the value of the sum of 'numberOne + numberTwo' is placed into the\n3rd %d.\n\n\nThis concludes this chapter, as you have learn to write a basic calculator that\n\n\nChallenges\n\n\n\n\n\n\nWrite a program that prints the following text.\n\n\n\n\nmain() is where programme execution begins.\n\n\nAll programme statements must be terminated by a semicolon.\n\n\n\n\n\n\n\n\nWhat output would you expect from the following programme.\n\n\n#include \nstdio.h\n\n\nint main (void) {\n  int intVar = 62;\n  _Bool boolVar = 0;\n  char charVar = 'T';\n\n  printf(\"intVar / 3 = %i\\n\", integerVar/3);\n  //don't forget that decimal numbers do not exist in a variable declared to be of type int\n\n  printf(\"boolVar = %i\\n\", boolVar);\n\n  printf(\"charVar = %c\\n\", charVar);\n\n  return 0;\n}", 
            "title": "Chapter 2"
        }, 
        {
            "location": "/chapter2/#chapter-2-programming-basics", 
            "text": "Before we can get into any coding stuff, we first need to understand some basic rules of programming first. Programming is pretty much all about taking in inputs and giving you out desired outputs. To make things a little bit more organised and understandable, these inputs and outputs are categorised into different groups called data types and are usually stored in variables.", 
            "title": "Chapter 2: Programming Basics"
        }, 
        {
            "location": "/chapter2/#what-is-that-program-written-in-the-1st-chapter", 
            "text": "Here is the short program that you wrote and ran in the last chapter:   #include  stdio.h \n\n int main(void)\n {\n     printf(\"Hello, world\");\n }  The first line of that program is '#include  ', what this does is imports code into your program so that you can use things that have already been written by\nother programmers for you to use. We programmers don't like to reinvent the wheel. The library being imported is 'stdio', which stands for standard input output. It allows\nuse to use the printf function. The thing we put in-between the parentheses is called an argument to the function. It is the information which we input into the function\nfor it to create some output. The output in this case is 'Hello, world'.  The next thing to consider is the 'int main(void)'. What is this?  We can see that int main(void) is followed by a curly bracket '{'. These curly brackets always come in pairs.\nYou can see that the one that completes the pair is the '}' at the very end of the program. Everything between these 2 curly brackets belong in the 'main' function.  Another important thing to remember is that the main function is the beginning of every C program.   int main(void)\n {\n\n }  This has to exist in every C program and it is where everything begins.", 
            "title": "What is that program written in the 1st chapter?"
        }, 
        {
            "location": "/chapter2/#data-types", 
            "text": "The C programming language provides five basic types: int, float, double, char and boolean", 
            "title": "Data Types"
        }, 
        {
            "location": "/chapter2/#the-integer-type-int", 
            "text": "A variable declared to be of type int can only contain integer values or values that do not have decimal places (and are therefore whole numbers). To display an int value at the terminal, the printf conversion characters %iV are used.  How would one declare a variable of type int?   int myVariable;  It's as simple as that! If you want, you can also add a value to it as you're intialising it like so:   int myVariable = 5;  Examples: -23, -83, 0, 435 and 1", 
            "title": "The Integer Type int"
        }, 
        {
            "location": "/chapter2/#the-floating-number-type-float", 
            "text": "A variable declared to be of type float can be used for storing values containing decimal places. To display an int value at the terminal, the printf conversion characters %f are used. To express a value of type float, f or F is put after a value such as 14.5f or -122.23F.  Examples: 3.0, 23.42, -0.3329 and 9.023  Similar to the integer declaration, a float declaration would be as follows:   float myVariable;", 
            "title": "The Floating Number Type float"
        }, 
        {
            "location": "/chapter2/#the-type-double", 
            "text": "The double type is very similar to the float type except that it is more precise. It can store approximately as many significant digits as can a variable declared to be of type float. All floating-point values are taken as the double type unless told otherwise.   double myVariable;", 
            "title": "The Type double"
        }, 
        {
            "location": "/chapter2/#the-char-type", 
            "text": "The char type is used to store a single character. Characters can be declared by enclosing a pair of quotation marks around them as follows; \u2018a\u2019, \u2018D\u2019, \u20183\u2019 and \u2019T\u2019. To display a char value at the terminal, the printf conversion characters %c are used   char myVariable;", 
            "title": "The char type"
        }, 
        {
            "location": "/chapter2/#the-boolean-data-type-boolean", 
            "text": "A variable declared to be of type boolean can only store 1 and 0 or True or False. boolean is used to indicate a Boolean condition or a condition which can be outputted to either true or false.  Using the Basic Data Types\u2026\u2026..(put down the code written by Kelvin)", 
            "title": "The Boolean Data Type boolean"
        }, 
        {
            "location": "/chapter2/#variables", 
            "text": "Variables are named and used to store program computations or results. Variables can be named in a way that reflect the usage of the data stored. For example, I can create a variable called \u201cnumberOfpens\u201d to store an int type which represents the number of pens I possess.  numberOfpens = 4;", 
            "title": "Variables"
        }, 
        {
            "location": "/chapter2/#naming-conventions", 
            "text": "There are certain rules that we need to follow when it comes down to naming variables.  Variable names can\u2019t begin with a number.\nEmbedded spaces are not permitted.\nVariable names can\u2019t be those that are same to reserved words in C e.g. int, float and so on.\n$ is not a valid character.  Although we cannot include any spaces in our variable names, programmers tend to use underscores( _ ) or uppercase letters to represent next words.   calculate_angle\n isTrue", 
            "title": "Naming Conventions"
        }, 
        {
            "location": "/chapter2/#arithmetic-expressions", 
            "text": "C\u2019s arithmetic expressions work pretty much the same way as those we use in the real-world. However, some of the maths rules might not be as you expect depending on the type that a variable is declared to be.  When there are two or more operations the idea of priority or precedence is introduced to determine which operation is to be evaluated first.  The following notions are listed in an order of precedence.  multiplication sign -  ( * )\ndivision sign -  ( / )\nplus sign -  ( + )\nminus sign -  ( - )", 
            "title": "Arithmetic Expressions"
        }, 
        {
            "location": "/chapter2/#a-few-extra-operations-to-consider", 
            "text": "When you have an 'integer' variable, you can increment its value as follows:   int number = 1;\n number = number + 1;  This would cause the value of number to increment by 1, as say the new value of number is the current value plus 1. This is often represented in short-form\nlike so:   number++;  This is basically identical to 'number = number + 1;'. How about if you wish to increment by more than 1?   number += 2;  Using '+=', we can cause an increment of +2, or whatever value we choose.  Finally, all all these work with decrementing values if we replace the '+' with a '-', pretty neat?   number--;\n number -= 2;  Programmers like to be lazy, this is just one of the many ways they chose to be so.", 
            "title": "A Few Extra Operations to consider"
        }, 
        {
            "location": "/chapter2/#exercises-lets-write-a-basic-calculator", 
            "text": "The first thing we need to do is prepare to prepare the file for use. We are going to be displaying things on the terminal, and asking for input, so we'll need to\ninclude the 'stdio' library.   #include  stdio.h \n\n int main(void)\n {\n\n }  We now need to ask for user input, and store the input into some variables, so that we can add them together later.  #include  stdio.h \n\nint main(void)\n{\n  int numberOne;\n  int numberTwo;\n\n  printf(\"Enter 2 numbers to add together:\\n\");\n  scanf(\"%d\",  numberOne);\n  scanf(\"%d\".  numberTwo);\n\n  printf(\"%d + %d = %d\", numberOne, numberTwo, numberOne + numberTwo);\n}  Some new things have creeped up in this exercise. What does this 'scanf' do? Well, it takes input from the console then puts it into the variable stated in the second\nargument of the function.    scanf(\"%d\",  numberOne);  This takes your input value and assigns it to numberOne, such that numberOne holds whatever whole number you decide to input.  But wait a second, what is this \"%d\" that is in both the 'printf' and 'scanf' in the first arguments? This \"%d\" is a formatter that is applied to the value of the argument\nin the same function. For example, in the above example of scanf, the number input into the terminal is then assigned to the variable 'numberOne'.  In the printf, 'numberOne' is placed into the first %d, 'numberTwo' is placed into the second %d, the value of the sum of 'numberOne + numberTwo' is placed into the\n3rd %d.  This concludes this chapter, as you have learn to write a basic calculator that", 
            "title": "Exercises: Let's Write a Basic Calculator!"
        }, 
        {
            "location": "/chapter2/#challenges", 
            "text": "Write a program that prints the following text.   main() is where programme execution begins.  All programme statements must be terminated by a semicolon.     What output would you expect from the following programme.  #include  stdio.h \n\nint main (void) {\n  int intVar = 62;\n  _Bool boolVar = 0;\n  char charVar = 'T';\n\n  printf(\"intVar / 3 = %i\\n\", integerVar/3);\n  //don't forget that decimal numbers do not exist in a variable declared to be of type int\n\n  printf(\"boolVar = %i\\n\", boolVar);\n\n  printf(\"charVar = %c\\n\", charVar);\n\n  return 0;\n}", 
            "title": "Challenges"
        }, 
        {
            "location": "/chapter3/", 
            "text": "Chapter 6: Arrays\n\n\nC provides a capability that enables you to define a set of ordered data items known as an array. This chapter will teach you how arrays can be used and manipulated.\n\n\nWhat is an Array?\n\n\nAn array is a type of data-structure that holds an ordered set of data all of the same type. The size of the array is predetermined, so if one were to\ndeclare an array of size 5, the maximum number of values it could ever hold would be 5, and no greater.\n\n\nDefining an Array\n\n\nTo name an array the same rules you use for naming a variable are applied. At the end of an array\u2019s name, the number inside a pair of square brackets implies the capacity of that particular array. For example, \u201cint people[4]\u201d contains the maximum number of four data items.\n\n\nInitialising Arrays\n\n\nThe way you initialise values to an array is pretty similar to how you do it with variables except that you only assign one value to a variable.\n\n\nFor example:\n\n\n int main(void){\n   int people[4] = {2, 4, 83, 9};\n }\n\n\n\nGet an access to arrays\n\n\nArray[n] is indexed from 0 to n-1. So you can get an access to a particular index using array[n] given that n is the index number whose stored valued is required.\n\n\nExercises\n\n\n\n\nDefine an array of size 5, holding the following elements: 2 15 32 37 48\n\n\nDefine another array of size 7, holding the following elements: 1, 13, 34, 56, 78, 85, 99\n\n\nAccess the fourth element in the first array, and the fifth element in the second array\n\n\nHave your compiler add these two elements together, without explicitly writing the numeric values (your input should look something like myArray[x] + mySecondArray[y])\n\n\nIf your answer wasn't 115, then you need to go over array indexing! Remember we start counting at 0, not 1!\n\n\nAssign the values 51 and 66 to the fourth and fifth elements of each array respectively.\n\n\nAgain, add them together. Implement your revision of array indexing from questions 4 and 5\n\n\n\n\nChallenges:\n\n\n\n\nUse a For Loop, to add together all the elements in the second array. Store the answer in an integer named total.\n\n\nUse a While Loop, to add together all the elements in the first array. Store the answer in an integer named secondTotal\nChallenge: Make two arrays of numbers, both 5 elements in length. Then, have your program add together the products of each pair of corresponding numbers. However, there is a catch! You cannot do this manually, by typing out all the maths yourself. Rather, you have to use one of the three kinds of loops available to you.", 
            "title": "Chapter 3"
        }, 
        {
            "location": "/chapter3/#chapter-6-arrays", 
            "text": "C provides a capability that enables you to define a set of ordered data items known as an array. This chapter will teach you how arrays can be used and manipulated.", 
            "title": "Chapter 6: Arrays"
        }, 
        {
            "location": "/chapter3/#what-is-an-array", 
            "text": "An array is a type of data-structure that holds an ordered set of data all of the same type. The size of the array is predetermined, so if one were to\ndeclare an array of size 5, the maximum number of values it could ever hold would be 5, and no greater.", 
            "title": "What is an Array?"
        }, 
        {
            "location": "/chapter3/#defining-an-array", 
            "text": "To name an array the same rules you use for naming a variable are applied. At the end of an array\u2019s name, the number inside a pair of square brackets implies the capacity of that particular array. For example, \u201cint people[4]\u201d contains the maximum number of four data items.", 
            "title": "Defining an Array"
        }, 
        {
            "location": "/chapter3/#initialising-arrays", 
            "text": "The way you initialise values to an array is pretty similar to how you do it with variables except that you only assign one value to a variable.  For example:   int main(void){\n   int people[4] = {2, 4, 83, 9};\n }", 
            "title": "Initialising Arrays"
        }, 
        {
            "location": "/chapter3/#get-an-access-to-arrays", 
            "text": "Array[n] is indexed from 0 to n-1. So you can get an access to a particular index using array[n] given that n is the index number whose stored valued is required.", 
            "title": "Get an access to arrays"
        }, 
        {
            "location": "/chapter3/#exercises", 
            "text": "Define an array of size 5, holding the following elements: 2 15 32 37 48  Define another array of size 7, holding the following elements: 1, 13, 34, 56, 78, 85, 99  Access the fourth element in the first array, and the fifth element in the second array  Have your compiler add these two elements together, without explicitly writing the numeric values (your input should look something like myArray[x] + mySecondArray[y])  If your answer wasn't 115, then you need to go over array indexing! Remember we start counting at 0, not 1!  Assign the values 51 and 66 to the fourth and fifth elements of each array respectively.  Again, add them together. Implement your revision of array indexing from questions 4 and 5", 
            "title": "Exercises"
        }, 
        {
            "location": "/chapter3/#challenges", 
            "text": "Use a For Loop, to add together all the elements in the second array. Store the answer in an integer named total.  Use a While Loop, to add together all the elements in the first array. Store the answer in an integer named secondTotal\nChallenge: Make two arrays of numbers, both 5 elements in length. Then, have your program add together the products of each pair of corresponding numbers. However, there is a catch! You cannot do this manually, by typing out all the maths yourself. Rather, you have to use one of the three kinds of loops available to you.", 
            "title": "Challenges:"
        }, 
        {
            "location": "/chapter4/", 
            "text": "Chapter 4: Making Decisions\n\n\nYou saw how decision-making powers were used in Chapter 4 with loops. Without such capabilities those loops we saw in the previous chapter would end up execute the same sequence of statements over and over again.\n\n\nThe if Statement\n\n\nC provides a general decision-making capability in the form of a language construct known as the if statement.\n\n\n if ( expression )\n {\n     programme statement(s);\n }\n\n\n\nTo simplify things a little, we can think of this as a normal English sentence such as \u201c If it rains, you will get wet and sick\u201d. A C version of this would be:\n\n\n if ( it rains ) {\n     you will get wet;\n     you will get sick;\n }\n\n\n\nLet's have a look a real implemention of this if statement.\n\n\n int main(void)\n {\n    int number = 4;\n\n    if ( number \n 5 )\n    {\n        printf(\"number is less than 5\\n\");\n    }\n }\n\n\n\nIn the example above, we have code that first initialises an integer called 'number' to the value of 4. We then begin the if statement, and create a condition to check for.\n The code inside the if statement only runs if conditions are met. In this case, if number is less than 5, run the code inside the if statement. As it stands, the value of\n number is 4, which is less than 5, so the code inside the if statement runs!\n\n\nThe switch Statement\n\n\nThe switch statement fills a similar role to that of the if statement. It checks for a case and if that case is met, runs the code below it.\nHere's an example:\n\n\n switch ( expression ) {\n     case value1:\n      printf(\"1\");\n          break;\n     case value2:\n         printf(\"2\");\n         break;\n     case value3:\n         printf(\"3\");\n         break;\n     default:\n         printf(\"default\");\n         break;\n }\n\n\n\nIn the example above, if expression equals to value1, it would print '1', if expression equals to value2, it would print '2'.... You get the picture.\n\n\nExercises: Let's Write Another Calculator Using Switch Statements!\n\n\nFor this particular calculator, we want to input 2 numbers, then also tell the program what we want to do with those 2 numbers.\n\n\n int main(void)\n {\n  int a;\n  int b;\n  char operation;\n\n  printf(\"Enter the first number:\\n\");\n  scanf(\"%i\", \na);\n  printf(\"Enter the second number:\\n\");\n  scanf(\"%i\", \nb);\n  printf(\"Enter the operation:\\n\");\n  scanf(\"%c\", \noperation);\n\n  calculate(a,b,operation);\n }\n\n int calculate(int a, int b, char operation)\n {\n   switch (operation)\n   {\n     case 'x':\n        return a * b;\n      case '+':\n        return a + b;\n      case '/':\n        return a / b;\n      default:\n        printf(\"Operation not recognised\");\n        return 666;\n   }\n }", 
            "title": "Chapter 4"
        }, 
        {
            "location": "/chapter4/#chapter-4-making-decisions", 
            "text": "You saw how decision-making powers were used in Chapter 4 with loops. Without such capabilities those loops we saw in the previous chapter would end up execute the same sequence of statements over and over again.", 
            "title": "Chapter 4: Making Decisions"
        }, 
        {
            "location": "/chapter4/#the-if-statement", 
            "text": "C provides a general decision-making capability in the form of a language construct known as the if statement.   if ( expression )\n {\n     programme statement(s);\n }  To simplify things a little, we can think of this as a normal English sentence such as \u201c If it rains, you will get wet and sick\u201d. A C version of this would be:   if ( it rains ) {\n     you will get wet;\n     you will get sick;\n }  Let's have a look a real implemention of this if statement.   int main(void)\n {\n    int number = 4;\n\n    if ( number   5 )\n    {\n        printf(\"number is less than 5\\n\");\n    }\n }  In the example above, we have code that first initialises an integer called 'number' to the value of 4. We then begin the if statement, and create a condition to check for.\n The code inside the if statement only runs if conditions are met. In this case, if number is less than 5, run the code inside the if statement. As it stands, the value of\n number is 4, which is less than 5, so the code inside the if statement runs!", 
            "title": "The if Statement"
        }, 
        {
            "location": "/chapter4/#the-switch-statement", 
            "text": "The switch statement fills a similar role to that of the if statement. It checks for a case and if that case is met, runs the code below it.\nHere's an example:   switch ( expression ) {\n     case value1:\n      printf(\"1\");\n          break;\n     case value2:\n         printf(\"2\");\n         break;\n     case value3:\n         printf(\"3\");\n         break;\n     default:\n         printf(\"default\");\n         break;\n }  In the example above, if expression equals to value1, it would print '1', if expression equals to value2, it would print '2'.... You get the picture.", 
            "title": "The switch Statement"
        }, 
        {
            "location": "/chapter4/#exercises-lets-write-another-calculator-using-switch-statements", 
            "text": "For this particular calculator, we want to input 2 numbers, then also tell the program what we want to do with those 2 numbers.   int main(void)\n {\n  int a;\n  int b;\n  char operation;\n\n  printf(\"Enter the first number:\\n\");\n  scanf(\"%i\",  a);\n  printf(\"Enter the second number:\\n\");\n  scanf(\"%i\",  b);\n  printf(\"Enter the operation:\\n\");\n  scanf(\"%c\",  operation);\n\n  calculate(a,b,operation);\n }\n\n int calculate(int a, int b, char operation)\n {\n   switch (operation)\n   {\n     case 'x':\n        return a * b;\n      case '+':\n        return a + b;\n      case '/':\n        return a / b;\n      default:\n        printf(\"Operation not recognised\");\n        return 666;\n   }\n }", 
            "title": "Exercises: Let's Write Another Calculator Using Switch Statements!"
        }, 
        {
            "location": "/chapter5/", 
            "text": "Chapter 5: Program Looping\n\n\nOne of the great capabilities of computers is their power to perform repeated calculations. This chapter will help you understand some constructs designed to do just that.\n\n\nThe for Loop\n\n\nThe for statement or for loop is one of the most frequently used statement. It allows you to do repeated calculations with a starting value until a condition is not satisfied.\n\n\n for ( initial_expression; loop_condition; loop_expression ) {\n      program statement(s);\n }\n\n\n\ninitial_expression; used to set up the value before a loop begins\nloop_condition; looping continues as long as this loop condition is satisfied\nloop_expression; contains an expression that is evaluated each time after the body of the loop is            executed\n\n\nFor example\n\n\n #include \nstdio.h\n\n\n int main(void)\n {\n   int count = 0;\n   int i;\n   for (i = 0 ; i \n 5; i++)\n   {\n     count = count + i;\n   }\n }\n\n\n\nThe while Loop\n\n\nThe while loop is another frequently used statement which has the syntax as follows.\n\n\n while ( expression ) {\n     program statement(s);\n }\n\n\n\nThe expression in the parentheses is evaluated; if it is evaluated to be true, the statements within the square brackets are then executed. As soon as the expression is evaluated false, the program will exit from the loop.\n\n\n( code samples )\n\n\nThe do Loop\n\n\nThis statement is fairly similar to the while statement except that the body of the do loop is executed at least once.\n\n\n do\n {\n     // something\n }\n while ( loop_expression );\n\n\n\nBefore entering the while loop, the program will first execute the statements just below \u201cdo\u201d.\n\n\n( code samples )\n\n\nThe break statement\n\n\nSometimes it is need to immediately exit the loop at a certain point. This can be done using the break statement.\n\n\n int main(void)\n {\n    int i;\n\n    for (i = 0; i \n 10; i++)\n    {\n      if (i == 5)\n      {\n        break;\n      }\n    }\n    printf(\"%d\\n\", i);\n }\n\n\n\nIn this example, the for loop keeps looping and incrementing the value of 'i', but once 'i' equals to 5, it meets the condition in the if statement,\nand finds a 'break', this exits the entire loop and the for loop is concluded and 'i' never reaches 6 (or any number beyond).\n\n\nAn important point to note is that 'break' can be used to exit any type of loop, such as 'while' and 'do' loops.\n\n\nThe continue statement\n\n\nThe continue statement is similar the beak statement except it cause the current iteration to terminate. To be more precise, it causes the loop to continue.\n\n\n  int main(void)\n  {\n     int i = 0;\n\n     while (i \n 5)\n     {\n       if ( i == 3)\n       {\n         i++;\n         continue;\n       }\n       printf(\"%d\\n\", i);\n       i++;\n     }\n  }\n\n\n\nIn this while loop, the program would print out the value of 'i' each iteration, but once 'i' equals to 3, it will increment 'i' but then hit the 'continue'.\nThis causes it to exit the current iteration of the while loop, ignoring the rest of the code below the continue, and skip to the next iteration where 'i'\nequals to 4. The console would print out:\n\n\n 0\n 1\n 2\n 4\n\n\n\nThe 3 would be skipped.\n\n\nChallenges\n\n\n1.\n By using a for Statement, write a program that calculates the sum of the first 20 positive integers(1-20).\n\n\n2.\n By using a do Statement, write a program that reverses any entered numbers.", 
            "title": "Chapter 5"
        }, 
        {
            "location": "/chapter5/#chapter-5-program-looping", 
            "text": "One of the great capabilities of computers is their power to perform repeated calculations. This chapter will help you understand some constructs designed to do just that.", 
            "title": "Chapter 5: Program Looping"
        }, 
        {
            "location": "/chapter5/#the-for-loop", 
            "text": "The for statement or for loop is one of the most frequently used statement. It allows you to do repeated calculations with a starting value until a condition is not satisfied.   for ( initial_expression; loop_condition; loop_expression ) {\n      program statement(s);\n }  initial_expression; used to set up the value before a loop begins\nloop_condition; looping continues as long as this loop condition is satisfied\nloop_expression; contains an expression that is evaluated each time after the body of the loop is            executed  For example   #include  stdio.h \n\n int main(void)\n {\n   int count = 0;\n   int i;\n   for (i = 0 ; i   5; i++)\n   {\n     count = count + i;\n   }\n }", 
            "title": "The for Loop"
        }, 
        {
            "location": "/chapter5/#the-while-loop", 
            "text": "The while loop is another frequently used statement which has the syntax as follows.   while ( expression ) {\n     program statement(s);\n }  The expression in the parentheses is evaluated; if it is evaluated to be true, the statements within the square brackets are then executed. As soon as the expression is evaluated false, the program will exit from the loop.  ( code samples )", 
            "title": "The while Loop"
        }, 
        {
            "location": "/chapter5/#the-do-loop", 
            "text": "This statement is fairly similar to the while statement except that the body of the do loop is executed at least once.   do\n {\n     // something\n }\n while ( loop_expression );  Before entering the while loop, the program will first execute the statements just below \u201cdo\u201d.  ( code samples )", 
            "title": "The do Loop"
        }, 
        {
            "location": "/chapter5/#the-break-statement", 
            "text": "Sometimes it is need to immediately exit the loop at a certain point. This can be done using the break statement.   int main(void)\n {\n    int i;\n\n    for (i = 0; i   10; i++)\n    {\n      if (i == 5)\n      {\n        break;\n      }\n    }\n    printf(\"%d\\n\", i);\n }  In this example, the for loop keeps looping and incrementing the value of 'i', but once 'i' equals to 5, it meets the condition in the if statement,\nand finds a 'break', this exits the entire loop and the for loop is concluded and 'i' never reaches 6 (or any number beyond).  An important point to note is that 'break' can be used to exit any type of loop, such as 'while' and 'do' loops.", 
            "title": "The break statement"
        }, 
        {
            "location": "/chapter5/#the-continue-statement", 
            "text": "The continue statement is similar the beak statement except it cause the current iteration to terminate. To be more precise, it causes the loop to continue.    int main(void)\n  {\n     int i = 0;\n\n     while (i   5)\n     {\n       if ( i == 3)\n       {\n         i++;\n         continue;\n       }\n       printf(\"%d\\n\", i);\n       i++;\n     }\n  }  In this while loop, the program would print out the value of 'i' each iteration, but once 'i' equals to 3, it will increment 'i' but then hit the 'continue'.\nThis causes it to exit the current iteration of the while loop, ignoring the rest of the code below the continue, and skip to the next iteration where 'i'\nequals to 4. The console would print out:   0\n 1\n 2\n 4  The 3 would be skipped.", 
            "title": "The continue statement"
        }, 
        {
            "location": "/chapter5/#challenges", 
            "text": "1.  By using a for Statement, write a program that calculates the sum of the first 20 positive integers(1-20).  2.  By using a do Statement, write a program that reverses any entered numbers.", 
            "title": "Challenges"
        }, 
        {
            "location": "/chapter6/", 
            "text": "Functions\n\n\nWhat are Functions?\n\n\nAll this time, we\u2019ve been using functions to write our codes, such as main() function, printf() function, scanf() function etc. These functions have been pre-written and its instructions given by another programmer. When loading the library at the beginning by using #include\n, the compiler or IDE loads these functions including a few more. The computer does not know what a function does unless they are instructed what to do when it is called. Remember, computers are actually very dumb!\nWhat exactly are functions? Functions are in a way an abbreviated form of a specific task or a lot of tasks. They are given instructions and then given a name. Even the \u2018if\u2019, \u2019for\u2019, \u2019while\u2019, \u2019do while\u2019, \u2018switch\u2019 statements are also functions prewritten into the library which have been instructed to carry out their specific tasks. You may ask what the point is in writing functions, we could just write the instructions after main() while writing the program. Well yes we could do that but it would make our code look very clumsy! We use functions to make our codes shorter and more legible when the writer and even other programmers look at the code. Once the function has been written, we can call the function multiple times and hence make the code shorter, saves a lot of time than writing the task which the function would do again and again.\n\n\nWriting Our First Function\n\n\nTo write a function, first we need to describe the return value of the function. For example, if we write a function to get the greater value of two numbers, the return value should be an int, float or a double. Let\u2019s do just that then, define a function to get the larger of two numbers. Let\u2019s call the function greater(). We declare the function like this:\n\n\n int greater();\n\n\n\nBy doing this we named a function. Now, the function greater will compare two numbers, which means it will be taking two arguments or parameters. An argument is a local variable that gets its value from the code that calls the function. The rest of the code will look something like this:\n\n\n int greater( int a, int b)\n {\n    if (a \n b)\n    {\n        return a;\n    }\n    return b;\n }\n\n\n\nThis describes a function to get greater of two numbers, a and b  -\n the two arguments. As you can see, the argument type also has to be declared in the function. After the curly braces, the instruction of the function is given, to compare the value of a and b then return whichever is greater to the main function after it is called.\nThe greater function can be used like this:\n\n\n int main()\n {\n    int ans = greater( a , b );\n    printf(\"%d\", ans);\n    return 0;\n }\n\n\n\nInstead of a and b, numbers have to be input and the answer will be printed in the terminal.\n\n\nVoid functions\n\n\nMost functions in C have values to be returned but sometimes a function can be created to do nothing special. It can be created to do something instead of calculating a number or returning a string to the main function. All functions created always contain a return statement at the end, such as \u2018return 0;\u2019 but a void function does not require one as the called function will not return a value.\n\n\n void show_off()\n {\n    printf(\u201cI am the best programmer you\u2019ll see\u201d);\n }\n\n\n\nThe code above is an example of a void function. When the show_off function is called, it prints the statement to the terminal instead of returning a value to the main function.\n\n\nExercises: Let's Write Some Functions!\n\n\nLet's see if you can write some functions for addition, subtraction, division and multiplication. First try doing them yourself and then see the following examples.\n\n\nFirstly, Prepare the file with the following code\n\n\n #include \nstdio.h\n\n\n int main(void)\n {\n\n }\n\n\n\nWriting an Addition function\n\n\nBelow the 'main' block, we can write a function called addition like so:\n\n\n int add(int a, int b)\n {\n   int c;\n\n  c = a + b;\n  return c;\n\n }\n\n\n\nLike shown in the first example with the greater functioin, we can then save the file with the following code and then compile:\n\n\n #include \nstdio.h\n\n\n int main(void)\n {\n\n  int ans = add(20, 8);\n  printf(\"The answer is %d\", ans);\n\n }\n\n int add(int a, int b)\n {\n   int c;\n\n  c = a + b;\n  return c;\n\n }\n\n\n\nThis will give you the answer in the terminal.\n\n\nFollowing the previous function, functions of subtraction, division and multiplication can also be written like this:\n\n\nSubtraction Function\n\n\n int subtract(int a, int b)\n {\n   int c;\n\n  c = a - b;\n  return c;\n\n }\n\n\n\nDivision function\n\n\n int divide(int a, int b)\n {\n   int c;\n\n  c = a/b;\n  return c;\n\n }\n\n\n\nMultiplication Function\n\n\n int Multiply(int a, int b)\n {\n   int c;\n\n  c = a*b;\n  return c;\n\n }\n\n\n\nAll these functions can be saved in a .c file like shown in the addition function and the answer will be printed on the terminal.\n\n\nNow you know how to make basic functions!\n\n\nLet\u2019s use the function we wrote to make a calculator in the Terminal.\n\n\nAgain see if you can make one by yourself because the more you make your own programs, the better programmer you will become!\n\n\nWell a soltion for the calculator is given below. We can write the 'main' block of the code like this:\n\n\n main()\n {\n  int a, b, ans, n;\n\n  printf (\"MENU: \\n Press '1' For ''Addition'' \\n Press '2' For ''Subtraction''\\n Press '3' For ''Division''\\n Press '4' For ''Multiplication'' \\n \");\n\n  printf(\"Enter your Choice\\n\");\n\n  scanf(\"%d\", \nn);\n\n  if(n==1 || n==2 || n==3 || n==4)\n  {\n        printf(\"Write two numbers and press enter\");\n        scanf(\"%d %d\", \na, \nb);\n\n        switch(n)\n        {\n               case 1:\n                    ans=add(a, b);\n                    break;\n               case 2:\n                    ans=subtract(a, b);\n                    break;\n               case 3:\n                    ans=divide(a, b);\n                    break;\n               case 4:\n                    ans=multiply(a, b);\n        }\n\n   printf(\" The Result is = %d\\n\", ans);\n\n  }\n  else\n  {\n       printf(\"Error, that is an invalid choice, please choose from 1-4.\\n\");\n  }\n\n\n }\n\n\n\nAs you can see, we used two different types of condition statements, the if and else statement so the right choice from 1-4 would be made. Any other number would give the error message. Then we used the switch statement to define the case of each function depending on the choice made and thus the function is called and the answer is printed. The final code might look like this.\n\n\n #include\nstdio.h\n\n\n\n main()\n {\n  int a, b, ans, n;\n\n  printf (\"MENU: \\n Press '1' For ''Addition'' \\n Press '2' For ''Subtraction''\\n Press '3' For ''Division''\\n Press '4' For ''Multiplication'' \\n \");\n\n  printf(\"Enter your Choice\\n\");\n\n  scanf(\"%d\", \nn);\n\n  if(n==1 || n==2 || n==3 || n==4)\n  {\n        printf(\"Write two numbers and press enter\");\n        scanf(\"%d %d\", \na, \nb);\n\n        switch(n)\n        {\n               case 1:\n                    ans=add(a, b);\n                    break;\n               case 2:\n                    ans=subtract(a, b);\n                    break;\n               case 3:\n                    ans=divide(a, b);\n                    break;\n               case 4:\n                    ans=multiply(a, b);\n        }\n\n   printf(\" The Result is = %d\\n\", ans);\n\n  }\n  else\n  {\n       printf(\"Error, that is an invalid choice, please choose from 1-4.\\n\");\n  }\n\n\n }\n\n int add(int a, int b)\n {\n   int c;\n\n  c = a + b;\n  return c;\n\n }\n\n\n\n int subtract(int a, int b)\n {\n   int c;\n\n  c = a - b;\n  return c;\n\n }\n\n int divide(int a, int b)\n {\n   int c;\n\n  c = a/b;\n  return c;\n\n }\n\n int multiply(int a, int b)\n {\n   int c;\n\n  c = a*b;\n  return c;\n\n }", 
            "title": "Chapter 6"
        }, 
        {
            "location": "/chapter6/#functions", 
            "text": "", 
            "title": "Functions"
        }, 
        {
            "location": "/chapter6/#what-are-functions", 
            "text": "All this time, we\u2019ve been using functions to write our codes, such as main() function, printf() function, scanf() function etc. These functions have been pre-written and its instructions given by another programmer. When loading the library at the beginning by using #include , the compiler or IDE loads these functions including a few more. The computer does not know what a function does unless they are instructed what to do when it is called. Remember, computers are actually very dumb!\nWhat exactly are functions? Functions are in a way an abbreviated form of a specific task or a lot of tasks. They are given instructions and then given a name. Even the \u2018if\u2019, \u2019for\u2019, \u2019while\u2019, \u2019do while\u2019, \u2018switch\u2019 statements are also functions prewritten into the library which have been instructed to carry out their specific tasks. You may ask what the point is in writing functions, we could just write the instructions after main() while writing the program. Well yes we could do that but it would make our code look very clumsy! We use functions to make our codes shorter and more legible when the writer and even other programmers look at the code. Once the function has been written, we can call the function multiple times and hence make the code shorter, saves a lot of time than writing the task which the function would do again and again.", 
            "title": "What are Functions?"
        }, 
        {
            "location": "/chapter6/#writing-our-first-function", 
            "text": "To write a function, first we need to describe the return value of the function. For example, if we write a function to get the greater value of two numbers, the return value should be an int, float or a double. Let\u2019s do just that then, define a function to get the larger of two numbers. Let\u2019s call the function greater(). We declare the function like this:   int greater();  By doing this we named a function. Now, the function greater will compare two numbers, which means it will be taking two arguments or parameters. An argument is a local variable that gets its value from the code that calls the function. The rest of the code will look something like this:   int greater( int a, int b)\n {\n    if (a   b)\n    {\n        return a;\n    }\n    return b;\n }  This describes a function to get greater of two numbers, a and b  -  the two arguments. As you can see, the argument type also has to be declared in the function. After the curly braces, the instruction of the function is given, to compare the value of a and b then return whichever is greater to the main function after it is called.\nThe greater function can be used like this:   int main()\n {\n    int ans = greater( a , b );\n    printf(\"%d\", ans);\n    return 0;\n }  Instead of a and b, numbers have to be input and the answer will be printed in the terminal.", 
            "title": "Writing Our First Function"
        }, 
        {
            "location": "/chapter6/#void-functions", 
            "text": "Most functions in C have values to be returned but sometimes a function can be created to do nothing special. It can be created to do something instead of calculating a number or returning a string to the main function. All functions created always contain a return statement at the end, such as \u2018return 0;\u2019 but a void function does not require one as the called function will not return a value.   void show_off()\n {\n    printf(\u201cI am the best programmer you\u2019ll see\u201d);\n }  The code above is an example of a void function. When the show_off function is called, it prints the statement to the terminal instead of returning a value to the main function.", 
            "title": "Void functions"
        }, 
        {
            "location": "/chapter6/#exercises-lets-write-some-functions", 
            "text": "Let's see if you can write some functions for addition, subtraction, division and multiplication. First try doing them yourself and then see the following examples.", 
            "title": "Exercises: Let's Write Some Functions!"
        }, 
        {
            "location": "/chapter6/#firstly-prepare-the-file-with-the-following-code", 
            "text": "#include  stdio.h \n\n int main(void)\n {\n\n }", 
            "title": "Firstly, Prepare the file with the following code"
        }, 
        {
            "location": "/chapter6/#writing-an-addition-function", 
            "text": "Below the 'main' block, we can write a function called addition like so:   int add(int a, int b)\n {\n   int c;\n\n  c = a + b;\n  return c;\n\n }  Like shown in the first example with the greater functioin, we can then save the file with the following code and then compile:   #include  stdio.h \n\n int main(void)\n {\n\n  int ans = add(20, 8);\n  printf(\"The answer is %d\", ans);\n\n }\n\n int add(int a, int b)\n {\n   int c;\n\n  c = a + b;\n  return c;\n\n }  This will give you the answer in the terminal.  Following the previous function, functions of subtraction, division and multiplication can also be written like this:", 
            "title": "Writing an Addition function"
        }, 
        {
            "location": "/chapter6/#subtraction-function", 
            "text": "int subtract(int a, int b)\n {\n   int c;\n\n  c = a - b;\n  return c;\n\n }", 
            "title": "Subtraction Function"
        }, 
        {
            "location": "/chapter6/#division-function", 
            "text": "int divide(int a, int b)\n {\n   int c;\n\n  c = a/b;\n  return c;\n\n }", 
            "title": "Division function"
        }, 
        {
            "location": "/chapter6/#multiplication-function", 
            "text": "int Multiply(int a, int b)\n {\n   int c;\n\n  c = a*b;\n  return c;\n\n }  All these functions can be saved in a .c file like shown in the addition function and the answer will be printed on the terminal.", 
            "title": "Multiplication Function"
        }, 
        {
            "location": "/chapter6/#now-you-know-how-to-make-basic-functions", 
            "text": "", 
            "title": "Now you know how to make basic functions!"
        }, 
        {
            "location": "/chapter6/#lets-use-the-function-we-wrote-to-make-a-calculator-in-the-terminal", 
            "text": "Again see if you can make one by yourself because the more you make your own programs, the better programmer you will become!  Well a soltion for the calculator is given below. We can write the 'main' block of the code like this:   main()\n {\n  int a, b, ans, n;\n\n  printf (\"MENU: \\n Press '1' For ''Addition'' \\n Press '2' For ''Subtraction''\\n Press '3' For ''Division''\\n Press '4' For ''Multiplication'' \\n \");\n\n  printf(\"Enter your Choice\\n\");\n\n  scanf(\"%d\",  n);\n\n  if(n==1 || n==2 || n==3 || n==4)\n  {\n        printf(\"Write two numbers and press enter\");\n        scanf(\"%d %d\",  a,  b);\n\n        switch(n)\n        {\n               case 1:\n                    ans=add(a, b);\n                    break;\n               case 2:\n                    ans=subtract(a, b);\n                    break;\n               case 3:\n                    ans=divide(a, b);\n                    break;\n               case 4:\n                    ans=multiply(a, b);\n        }\n\n   printf(\" The Result is = %d\\n\", ans);\n\n  }\n  else\n  {\n       printf(\"Error, that is an invalid choice, please choose from 1-4.\\n\");\n  }\n\n\n }  As you can see, we used two different types of condition statements, the if and else statement so the right choice from 1-4 would be made. Any other number would give the error message. Then we used the switch statement to define the case of each function depending on the choice made and thus the function is called and the answer is printed. The final code might look like this.   #include stdio.h \n\n\n main()\n {\n  int a, b, ans, n;\n\n  printf (\"MENU: \\n Press '1' For ''Addition'' \\n Press '2' For ''Subtraction''\\n Press '3' For ''Division''\\n Press '4' For ''Multiplication'' \\n \");\n\n  printf(\"Enter your Choice\\n\");\n\n  scanf(\"%d\",  n);\n\n  if(n==1 || n==2 || n==3 || n==4)\n  {\n        printf(\"Write two numbers and press enter\");\n        scanf(\"%d %d\",  a,  b);\n\n        switch(n)\n        {\n               case 1:\n                    ans=add(a, b);\n                    break;\n               case 2:\n                    ans=subtract(a, b);\n                    break;\n               case 3:\n                    ans=divide(a, b);\n                    break;\n               case 4:\n                    ans=multiply(a, b);\n        }\n\n   printf(\" The Result is = %d\\n\", ans);\n\n  }\n  else\n  {\n       printf(\"Error, that is an invalid choice, please choose from 1-4.\\n\");\n  }\n\n\n }\n\n int add(int a, int b)\n {\n   int c;\n\n  c = a + b;\n  return c;\n\n }\n\n\n\n int subtract(int a, int b)\n {\n   int c;\n\n  c = a - b;\n  return c;\n\n }\n\n int divide(int a, int b)\n {\n   int c;\n\n  c = a/b;\n  return c;\n\n }\n\n int multiply(int a, int b)\n {\n   int c;\n\n  c = a*b;\n  return c;\n\n }", 
            "title": "Let\u2019s use the function we wrote to make a calculator in the Terminal."
        }, 
        {
            "location": "/about/", 
            "text": "About Us\n\n\nKelvin Chan\n\n\nMy name is Kelvin, I was born in London though my parents were from Hong Kong. I feel that we're in an age that places extreme importance on computers. No matter where you are, what you want to do for work,\nwho you are, a computer is going to come in at some point and be needed to proceed. If you love technology, and you want to create things to be used on such technology, learning to program would be your first step into truly embracing the world of technology!\n\n\nFasbeer\n\n\nI'm Fasbeer Eskander, A 1st year in computer science at UCL. I've always been interested in programming and all the wonders one can do with technology if he knows how it is programmed and how to program one himself. With a keen interest on it from a child, i decided to do my Bsc on computer science and learn the DNA of computer programs.\n\n\nThomas\n\n\nI'm Thomas, a first year computer science student at UCL. I first got inspired by the movie called The Social Network which is about how Facebook got started. Since then Facebook has gone on and made a number of big impacts in many aspects of our lives. This has me want to do the same, with the skills I've been learning as a computer scientist, to make the world a better place.\n\n\nFarooq\n\n\nI'm Farooq Dean and I'm a computer science student at UCL. I try to learn languages in my spare time and sometimes play basketball.", 
            "title": "About"
        }, 
        {
            "location": "/about/#about-us", 
            "text": "", 
            "title": "About Us"
        }, 
        {
            "location": "/about/#kelvin-chan", 
            "text": "My name is Kelvin, I was born in London though my parents were from Hong Kong. I feel that we're in an age that places extreme importance on computers. No matter where you are, what you want to do for work,\nwho you are, a computer is going to come in at some point and be needed to proceed. If you love technology, and you want to create things to be used on such technology, learning to program would be your first step into truly embracing the world of technology!", 
            "title": "Kelvin Chan"
        }, 
        {
            "location": "/about/#fasbeer", 
            "text": "I'm Fasbeer Eskander, A 1st year in computer science at UCL. I've always been interested in programming and all the wonders one can do with technology if he knows how it is programmed and how to program one himself. With a keen interest on it from a child, i decided to do my Bsc on computer science and learn the DNA of computer programs.", 
            "title": "Fasbeer"
        }, 
        {
            "location": "/about/#thomas", 
            "text": "I'm Thomas, a first year computer science student at UCL. I first got inspired by the movie called The Social Network which is about how Facebook got started. Since then Facebook has gone on and made a number of big impacts in many aspects of our lives. This has me want to do the same, with the skills I've been learning as a computer scientist, to make the world a better place.", 
            "title": "Thomas"
        }, 
        {
            "location": "/about/#farooq", 
            "text": "I'm Farooq Dean and I'm a computer science student at UCL. I try to learn languages in my spare time and sometimes play basketball.", 
            "title": "Farooq"
        }
    ]
}